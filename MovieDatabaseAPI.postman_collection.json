{
	"info": {
		"_postman_id": "12a59609-562a-4086-baa7-d5b11c6e6873",
		"name": "Movie Database API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38660387"
	},
	"item": [
		{
			"name": "Genres",
			"item": [
				{
					"name": "GET (Genre by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{g}}/1",
							"host": [
								"{{url}}{{g}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Genre & Movies by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{g}}/1/movies",
							"host": [
								"{{url}}{{g}}"
							],
							"path": [
								"1",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (all Genres)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{g}}",
							"host": [
								"{{url}}{{g}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "size",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST (new Genre)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Horror\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{g}}",
							"host": [
								"{{url}}{{g}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Update Genre)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Epic Adventure\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{g}}/1",
							"host": [
								"{{url}}{{g}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Remove Genre)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}{{g}}/1?cascade=true",
							"host": [
								"{{url}}{{g}}"
							],
							"path": [
								"1"
							],
							"query": [
								{
									"key": "cascade",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "GET (Movie by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{m}}/3",
							"host": [
								"{{url}}{{m}}"
							],
							"path": [
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Search Title)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{m}}/search?title=shaw",
							"host": [
								"{{url}}{{m}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "shaw"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (all Movies)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"let table = `\r",
									"    <style>\r",
									"        body {\r",
									"            background-color: #2e2e2e;\r",
									"            color: #ffffff;\r",
									"            font-family: Arial, sans-serif;\r",
									"        }\r",
									"        table {\r",
									"            width: 100%;\r",
									"            border-collapse: collapse;\r",
									"        }\r",
									"        th, td {\r",
									"            padding: 12px;\r",
									"            text-align: left;\r",
									"            border: 1px solid #444;\r",
									"        }\r",
									"        th {\r",
									"            background-color: #444;\r",
									"        }\r",
									"        tr:nth-child(even) {\r",
									"            background-color: #3e3e3e;\r",
									"        }\r",
									"        tr:nth-child(odd) {\r",
									"            background-color: #2e2e2e;\r",
									"        }\r",
									"        tr:hover {\r",
									"            background-color: #575757;\r",
									"        }\r",
									"    </style>\r",
									"    <table>\r",
									"        <thead>\r",
									"            <tr>\r",
									"                <th>Movie Title</th>\r",
									"                <th>Release Year</th>\r",
									"                <th>Genre</th>\r",
									"                <th>Duration (Minutes)</th>\r",
									"                <th>Actors</th>\r",
									"            </tr>\r",
									"        </thead>\r",
									"        <tbody>`;\r",
									"\r",
									"jsonData.forEach(movie => {\r",
									"    const actors = movie.actors.map(actor => `${actor.name} (Born: ${actor.birthdate})`).join('<br>');\r",
									"\r",
									"    table += `\r",
									"        <tr>\r",
									"            <td>${movie.title}</td>\r",
									"            <td>${movie.releaseYear}</td>\r",
									"            <td>${movie.genre.name}</td>\r",
									"            <td>${(movie.duration / 60).toFixed(2)}</td>\r",
									"            <td>${actors}</td>\r",
									"        </tr>`;\r",
									"});\r",
									"\r",
									"table += `\r",
									"        </tbody>\r",
									"    </table>`;\r",
									"\r",
									"pm.visualizer.set(table);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{m}}",
							"host": [
								"{{url}}{{m}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "year",
									"value": "1972",
									"disabled": true
								},
								{
									"key": "actor",
									"value": "4",
									"disabled": true
								},
								{
									"key": "genre",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Movie Actors)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{m}}/1/actors",
							"host": [
								"{{url}}{{m}}"
							],
							"path": [
								"1",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST (new Movie)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"actors\": [\r\n            {\r\n                \"id\": 1\r\n            },\r\n            {\r\n                \"id\": 5\r\n            }\r\n        ],\r\n        \"genres\": [\r\n            {\r\n                \"id\": 3\r\n            },\r\n            {\r\n                \"id\": 1\r\n            }\r\n        ],\r\n        \"title\": \"New Movie 1\",\r\n        \"releaseYear\": \"2004\",\r\n        \"duration\": 8525\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{m}}",
							"host": [
								"{{url}}{{m}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Update Movie)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"actors\": [\r\n        {\r\n            \"id\": 1\r\n        },\r\n        {\r\n            \"id\": 2\r\n        }\r\n    ],\r\n    \"genres\": [\r\n        {\r\n            \"id\": 3\r\n        },\r\n        {\r\n            \"id\": 4\r\n        }\r\n    ],\r\n    \"title\": \"The Shawshank Redemption 2\",\r\n    \"releaseYear\": \"1995\",\r\n    \"duration\": 8521\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{m}}/1",
							"host": [
								"{{url}}{{m}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Remove Movie)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}{{m}}/2",
							"host": [
								"{{url}}{{m}}"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Actors",
			"item": [
				{
					"name": "GET (Actor by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{a}}/1",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Search Name)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{a}}/search?name=tom",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "tom"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Actor & Movies by ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{a}}/1/movies",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"1",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (all Actors)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{a}}?page=0&size=5",
							"host": [
								"{{url}}{{a}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Sort Actors Alphabetically",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{a}}/sort",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"sort"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST (new Actor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Karlis Paulus\",\r\n    \"birthdate\": \"1995-01-01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{a}}",
							"host": [
								"{{url}}{{a}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Update Actor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Jackson Michael\",\r\n    \"birthdate\": \"1996-08-21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{a}}/5",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Actor Movies)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[1, 2]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}{{a}}/1/movies",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"1",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Remove Actor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}{{a}}/2?cascade=true",
							"host": [
								"{{url}}{{a}}"
							],
							"path": [
								"2"
							],
							"query": [
								{
									"key": "cascade",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "localhost:8080/api",
			"type": "string"
		},
		{
			"key": "g",
			"value": "/genres",
			"type": "string"
		},
		{
			"key": "m",
			"value": "/movies",
			"type": "string"
		},
		{
			"key": "a",
			"value": "/actors",
			"type": "string"
		}
	]
}